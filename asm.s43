#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        
        ORG     01C00h                  ; start of ram

//PRE-DEFINED VALUES START HERE
; Digits    0     1     2     3     4     5     6     7     8     9
digitH  db 0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0xE0, 0xFF, 0xF7
digitL  db 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
; Letter    A     B     D     E     G     I     L     M     N     O     P     R     T     
letterH db 0xEF, 0xF1, 0xF0, 0x9E, 0xBD, 0x90, 0x1C, 0x6C, 0x6C, 0xFC, 0xCF, 0xCF, 0x80
letterL db 0x00, 0x50, 0x50, 0x00, 0x00, 0x50, 0x00, 0xA0, 0x82, 0x00, 0x00, 0x02, 0x50
//PRE-DEFINED VALUES END HERE

;        ORG     0FFE8h                  ; vector for TIMER_A0
;        DC16    TIMER_A0_ISR            ; set vector for 'TIMER_A0_ISR' routine

        ORG     0FFDAh                  ; Set interrupt vector for input in P1.
        DC16    PORT1_ISR               ; Interrupts generated by Port 1 will
                                        ; be serviced by routine which address
                                        ; is stored at address 0FFDAh of the
                                        ; Interrupt Vector Table (IVT).
                                                       
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default
        bic.b   #0xFF,&P9SEL0
        bic.b   #0xFF,&P9SEL1

        bis.b   #0FDh,&P1DIR            ; Set P1.1 and P1.2 for input and all
                                        ; other P1 pins for output
        bis.b   #0FFh,&P2DIR            ; All Port 2 pins as output
        bis.b   #0xFF,&P9DIR            ; All Port 9 pins as output

        bis.b   #06h, &P1REN            ; P1.1, P1.2 Resistor enabled as pullup
        bis.b   #06h, &P1OUT            ; resistor. Push is read as 0 and else 1
                                        
        bis.b   #06h, &P1IE             ; Enable interrupt at P1.1, P1.2
        bis.b   #06h, &P1IES            ; Set interrupt on high-to-low 
                                        ; transition of P1.1, P1.2

        ; Enable LCD segments
        mov     #0xffff,&LCDCPCTL0
        mov     #0xfc3f,&LCDCPCTL1
        mov     #0x0fff,&LCDCPCTL2
        
        mov     #0x041e,&LCDCCTL0       ; Initialize LCD_C
        mov     #0x0208,&LCDCVCTL       ; Initialize voltage
        mov     #0x8000,&LCDCCPCTL      ; Clock synchronization enabled
        mov     #2,&LCDCMEMCTL          ; Clear LCD memory
        bis     #1,&LCDCCTL0            ; Turn LCD on
        bic     #LOCKLPM5,&PM5CTL0      ; Disable the GPIO power-on by default
        call    #displayOption
        
        ; Timmer setup
        mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt
        mov     #TASSEL_2+MC_1+ID_3,&TA0CTL  ;Set timer according to next table
	nop
        mov     #62500, &TA0CCR0        ; Set the timer capture compare register 0
        call    #stopStartTimer
        
        ; Registers
        mov     #0,R4                   ; Represents the state of the program
        
        bic.b   #06h, &P1IFG            ; To erase a flag raised before
                                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.

        NOP                             ; NOP before setting GIE required by
                                        ; the architecture
        bis     #GIE+LPM0, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        nop                             ; Required after enabling interrupts

        JMP $                           ; jump to current location '$'
        NOP                             ; (endless loop)

;Interrupt Service Routine (ISR) that will be executed when the timmer 
TIMER_A0_ISR:
        reti
// ------------------------------------------------------------------------------------------------------ joshua 
// Objetivo: 
// Precondiciones: 
// Postcondiciones:  
// Autor: 
// Fecha:
PORT1_ISR:
        call    #delay
        mov.b   &P1IFG,R5
        bit.b   #2, &P1IFG                                      
        jnz     s1State              
        bit.b   #4, &P1IFG                                     
        jnz     s2State              

// Objetivo: 
// Precondiciones: 
// Postcondiciones: 
// Autor: 
// Fecha:
s1State:
        cmp     #1,R4
        jeq     bpm
        cmp     #2,R4
        jeq     records
        jmp     fin

// Objetivo: 
// Precondiciones: 
// Postcondiciones:  
// Autor: 
// Fecha:
s2State:
        cmp     #2,R4
        jeq     resetState
        cmp     #0,R4
        jeq     reading
        cmp     #1,R4
        jeq     loging
        jmp     fin

nextState:
        inc     R4
        ret

previousState:
        dec     R4
        ret

skipState:
        inc     R4
        jmp     s2State

resetState:
        mov     #0,R4
        jmp     s2State

// ----------------------------------------------------------------------------------------------------------------- joshua 

reading:
        call    #nextState
        call    #displayRead
        jmp     fin
        
loging:
        call    #nextState
        call    #displayLog
        jmp     fin

bpm:
        cmp     #0,R6
        jeq     stopStartTimer
        jmp     fin

stopStartTimer:
        xor 	#CCIE, &TA0CCTL0
	nop
        ret
        
records:
        jmp     fin

// Objetivo: Delay used for combating the button bouncing
// Precondiciones: N/A
// Postcondiciones: Register 4 data will be temporarly stored on the Ram until
// the delay ends 
// Autor: Daniel A. Crespo 
// Fecha:Apr/17/2021
delay:                                  
        push.b  R4
        mov     #0x2710,R4             
    decrement:                          
        dec     R4                     
        jnz     decrement
        pop     R4
        ret

// Objetivo: Display a number on the first segment of the LCD Display
// Precondiciones: R9 contains the position of the number that should be displayed
// Postcondiciones: LCD will display a number at the first segment
// Autor: Rey J. Cotto
// Fecha: Apr/17/2021
displayFirstSegment:                    
        mov.b   digitH(R9),&0x0A29      
        mov.b   digitL(R9),&0x0A29+1
        ret

// Objetivo: Display a number on the second segment of the LCD Display
// Precondiciones: R9 contains the position of the number that should be displayed
// Postcondiciones: LCD will display a number at the second segment
// Autor: Rey J. Cotto
// Fecha: Apr/17/2021
displaySecondSegment:                   
        mov.b   digitH(R9),&0x0A25      
        mov.b   digitL(R9),&0x0A25+1
        ret

// Objetivo: Display a number on the third segment of the LCD Display
// Precondiciones: R9 contains the position of the number that should be displayed
// Postcondiciones: LCD will display a number at the third segment
// Autor: Rey J. Cotto
// Fecha: Apr/17/2021
displayThirdSegment:                    
        mov.b   digitH(R9),&0x0A23      
        mov.b   digitL(R9),&0x0A23+1
        ret

// --------------------------------------------------------------------------------------------------------------------------- Rey 

// Objetivo: 
// Precondiciones: 
// Postcondiciones: 
// Autor: 
// Fecha:
displayOption:
        ret

// Objetivo: 
// Precondiciones: 
// Postcondiciones: 
// Autor: 
// Fecha:
displayRead:
        ret

// Objetivo: 
// Precondiciones: 
// Postcondiciones: 
// Autor: 
// Fecha:
displayLog:
        ret

// Objetivo: 
// Precondiciones: 
// Postcondiciones:
// Autor: 
// Fecha:
displayBPM:
        ret

// --------------------------------------------------------------------------------------------------------------------------- Rey 

fin:    
        reti


        END
